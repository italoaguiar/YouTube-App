<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyToolkit.Extended</name>
    </assembly>
    <members>
        <member name="M:MyToolkit.Mvvm.ViewModelHelper.RegisterViewModel(MyToolkit.Mvvm.ViewModelBase,System.Windows.FrameworkElement)">
            <summary>Initializes the view model and registers events so that the OnLoaded and OnUnloaded methods are called. 
            This method must be called in the constructor after the <see cref="!:InitializeComponent"/> method call. </summary>
            <param name="viewModel">The view model. </param>
            <param name="view">The view. </param>
        </member>
        <member name="T:MyToolkit.Utilities.DependencyObjectExtensions">
            <summary>Provides extension methods for <see cref="T:System.Windows.DependencyObject"/> objects. </summary>
        </member>
        <member name="M:MyToolkit.Utilities.DependencyObjectExtensions.FindVisualChild``1(System.Windows.DependencyObject)">
            <summary>Traverses the visual child and returns the first child of the given generic type. </summary>
            <typeparam name="T">The child type to find. </typeparam>
            <param name="obj">The parent object. </param>
            <returns>The child object. </returns>
        </member>
        <member name="T:MyToolkit.Behaviors.Behavior`1">
            <summary>A typed XAML behavior. </summary>
            <typeparam name="T">The type of the attached object. </typeparam>
        </member>
        <member name="T:MyToolkit.Behaviors.Behavior">
            <summary>A XAML behavior. </summary>
            <typeparam name="T">The type of the attached object. </typeparam>
        </member>
        <member name="P:MyToolkit.Behaviors.Behavior.AssociatedObject">
            <summary>Gets or sets the associated object. </summary>
        </member>
        <member name="P:MyToolkit.Behaviors.Behavior.AssociatedType">
            <summary>Gets or sets the type of the associated object. </summary>
        </member>
        <member name="T:MyToolkit.Converters.DateTimeConverter">
            <summary>
            Converts a DateTime into its string representation. 
            </summary>
        </member>
        <member name="T:MyToolkit.Encryption.RijndaelEncryption">
            <summary>
            Provides methods to encrypt and decrypt data using the Rijndael encryption algorithm. 
            </summary>
        </member>
        <member name="T:MyToolkit.Events.SingleEvent">
            <summary>Provides methods to register self-deregistering event callbacks. </summary>
        </member>
        <member name="M:MyToolkit.Events.SingleEvent.WaitForEventAsync``2(``0,System.Action{``0,System.EventHandler{``1}},System.Action{``0,System.EventHandler{``1}})">
            <summary>Asynchronously wait for an occurrence of the given event. </summary>
            <typeparam name="TEventSource">The type of the event source. </typeparam>
            <typeparam name="TEventArgs">The type of the event args. </typeparam>
            <param name="source">The source object. </param>
            <param name="register">The event registration action. </param>
            <param name="deregister">The event deregistration action. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Events.SingleEvent.WaitForRoutedEventAsync``1(``0,System.Action{``0,System.Windows.RoutedEventHandler},System.Action{``0,System.Windows.RoutedEventHandler})">
            <summary>Asynchronously wait for an occurrence of the given event. </summary>
            <typeparam name="TEventSource">The type of the event source. </typeparam>
            <param name="source">The source object. </param>
            <param name="register">The event registration action. </param>
            <param name="deregister">The event deregistration action. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Events.SingleEvent.WaitForEventAsync``1(``0,System.Action{``0,System.Windows.RoutedEventHandler},System.Action{``0,System.Windows.RoutedEventHandler})">
            <summary>Asynchronously wait for an occurrence of the given event. </summary>
            <typeparam name="TEventSource">The type of the event source. </typeparam>
            <param name="source">The source object. </param>
            <param name="register">The event registration action. </param>
            <param name="deregister">The event deregistration action. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Events.SingleEvent.RegisterEvent``2(``0,System.Action{``0,System.EventHandler{``1}},System.Action{``0,System.EventHandler{``1}},System.Action{System.Object,``1})">
            <summary>Registers an event callback which is called once and then automatically deregistered. </summary>
            <typeparam name="TEventSource">The type of the event source. </typeparam>
            <typeparam name="TEventArgs">The type of the event args. </typeparam>
            <param name="source">The source object. </param>
            <param name="register">The event registration action. </param>
            <param name="deregister">The event deregistration action. </param>
            <param name="handler">The event handler. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Events.SingleEvent.RegisterRoutedEvent``1(``0,System.Action{``0,System.Windows.RoutedEventHandler},System.Action{``0,System.Windows.RoutedEventHandler},System.Action{System.Object,System.Windows.RoutedEventArgs})">
            <summary>Registers an event callback which is called once and then automatically deregistered. </summary>
            <typeparam name="TEventSource">The type of the event source. </typeparam>
            <param name="source">The source object. </param>
            <param name="register">The event registration action. </param>
            <param name="deregister">The event deregistration action. </param>
            <param name="handler">The event handler. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Events.SingleEvent.RegisterEvent``1(``0,System.Action{``0,System.Windows.RoutedEventHandler},System.Action{``0,System.Windows.RoutedEventHandler},System.Action{System.Object,System.Windows.RoutedEventArgs})">
            <summary>Registers an event callback which is called once and then automatically deregistered. </summary>
            <typeparam name="TEventSource">The type of the event source. </typeparam>
            <param name="source">The source object. </param>
            <param name="register">The event registration action. </param>
            <param name="deregister">The event deregistration action. </param>
            <param name="handler">The event handler. </param>
            <returns>The task. </returns>
        </member>
        <member name="T:MyToolkit.Messaging.DefaultActions">
            <summary>Provides default actions for some message lcasses to use with the <see cref="T:MyToolkit.Messaging.Messenger"/>. </summary>
        </member>
        <member name="M:MyToolkit.Multimedia.YouTube.GetThumbnailUri(System.String,MyToolkit.Multimedia.YouTubeThumbnailSize)">
            <summary>
            Returns a thumbnail for the given YouTube ID. 
            </summary>
        </member>
        <member name="M:MyToolkit.Multimedia.YouTube.GetBestVideoUri(System.Collections.Generic.IEnumerable{MyToolkit.Multimedia.YouTubeUri},MyToolkit.Multimedia.YouTubeQuality,MyToolkit.Multimedia.YouTubeQuality)">
            <summary>
            Returns the best matching YouTube stream URI which has an audio and video channel and is not 3D.
            </summary>
            <returns>Returns null when no appropriate URI has been found. </returns>
        </member>
        <member name="M:MyToolkit.Multimedia.YouTube.GetVideoUriAsync(System.String,MyToolkit.Multimedia.YouTubeQuality)">
            <summary>
            Returns the best matching YouTube stream URI which has an audio and video channel and is not 3D. 
            </summary>
            <returns>Returns null when no appropriate URI has been found. </returns>
        </member>
        <member name="M:MyToolkit.Multimedia.YouTube.GetVideoUriAsync(System.String,MyToolkit.Multimedia.YouTubeQuality,System.Threading.CancellationToken)">
            <summary>
            Returns the best matching YouTube stream URI which has an audio and video channel and is not 3D. 
            </summary>
            <returns>Returns null when no appropriate URI has been found. </returns>
        </member>
        <member name="M:MyToolkit.Multimedia.YouTube.GetVideoUriAsync(System.String,MyToolkit.Multimedia.YouTubeQuality,MyToolkit.Multimedia.YouTubeQuality)">
            <summary>
            Returns the best matching YouTube stream URI which has an audio and video channel and is not 3D. 
            </summary>
            <returns>Returns null when no appropriate URI has been found. </returns>
        </member>
        <member name="M:MyToolkit.Multimedia.YouTube.GetVideoUriAsync(System.String,MyToolkit.Multimedia.YouTubeQuality,MyToolkit.Multimedia.YouTubeQuality,System.Threading.CancellationToken)">
            <summary>
            Returns the best matching YouTube stream URI which has an audio and video channel and is not 3D. 
            </summary>
            <returns>Returns null when no appropriate URI has been found. </returns>
        </member>
        <member name="M:MyToolkit.Multimedia.YouTube.GetUrisAsync(System.String)">
            <summary>
            Returns all available URIs (audio-only and video) for the given YouTube ID. 
            </summary>
        </member>
        <member name="M:MyToolkit.Multimedia.YouTube.GetUrisAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns all available URIs (audio-only and video) for the given YouTube ID. 
            </summary>
        </member>
        <member name="M:MyToolkit.Serialization.DataContractSerialization.CreateCachedSerializer``1(System.Boolean,System.Type[])">
            <summary>Creates or retrieves a serializer for the given type and extra types. </summary>
            <typeparam name="T">The type to create the serialzer for. </typeparam>
            <param name="preserveReferences">Specifies whether to preserve references. </param>
            <param name="extraTypes">The extra types. </param>
            <returns>The <see cref="T:System.Xml.Serialization.XmlSerializer"/>. </returns>
        </member>
        <member name="M:MyToolkit.Serialization.DataContractSerialization.CreateSerializer``1(System.Boolean,System.Type[])">
            <summary>Creates a serializer for the given type and extra types. </summary>
            <typeparam name="T">The type to create the serialzer for. </typeparam>
            <param name="preserveReferences">Specifies whether to preserve references. </param>
            <param name="extraTypes">The extra types. </param>
            <returns>The <see cref="T:System.Xml.Serialization.XmlSerializer"/>. </returns>
        </member>
        <member name="M:MyToolkit.Serialization.DataContractSerialization.Serialize``1(``0,System.Boolean,System.Type[],System.Boolean)">
            <summary>Serializes an object to a XML string. </summary>
            <typeparam name="T">The type of the object to serialize. </typeparam>
            <param name="obj">The object to serialize. </param>
            <param name="preserveReferences">Specifies whether to preserve references. </param>
            <param name="extraTypes">The additional types. </param>
            <param name="useSerializerCache">Specifies whether to cache the serializer (default: true). </param>
            <returns>The XML string. </returns>
        </member>
        <member name="M:MyToolkit.Serialization.DataContractSerialization.Deserialize``1(System.String,System.Type[],System.Boolean)">
            <summary>Deserializes an object from a XML string. </summary>
            <typeparam name="T">The type of the resulting object. </typeparam>
            <param name="xml">The XML string. </param>
            <param name="extraTypes">The addional types. </param>
            <param name="useSerializerCache">Specifies whether to cache the serializer (default: true). </param>
            <returns>The deserialized object. </returns>
        </member>
        <member name="M:MyToolkit.Serialization.DataContractSerialization.SerializeAsync``1(``0,System.Boolean,System.Type[],System.Boolean)">
            <summary>Asynchronously serializes an object to a XML string. </summary>
            <typeparam name="T">The type of the object to serialize. </typeparam>
            <param name="preserveReferences">Specifies whether to preserve references. </param>
            <param name="obj">The object to serialize. </param>
            <param name="extraTypes">The additional types. </param>
            <param name="useSerializerCache">Specifies whether to cache the serializer (default: true). </param>
            <returns>The XML string. </returns>
        </member>
        <member name="M:MyToolkit.Serialization.DataContractSerialization.DeserializeAsync``1(System.String,System.Type[],System.Boolean)">
            <summary>Asynchronously deserializes an object from a XML string. </summary>
            <typeparam name="T">The type of the resulting object. </typeparam>
            <param name="xml">The XML string. </param>
            <param name="extraTypes">The addional types. </param>
            <param name="useSerializerCache">Specifies whether to cache the serializer (default: true). </param>
            <returns>The deserialized object. </returns>
        </member>
        <member name="T:MyToolkit.Utilities.ColorUtilities">
            <summary>Provides methods to manipulate <see cref="T:System.Windows.Media.Color"/> objects. </summary>
        </member>
        <member name="M:MyToolkit.Utilities.ColorUtilities.Mix(System.Windows.Media.Color,System.Double,System.Windows.Media.Color)">
            <summary>Blends the given foreground color with the background using the given alpha value. </summary>
            <param name="foreground">The foreground <see cref="T:System.Windows.Media.Color"/>. </param>
            <param name="alpha">The alpha value. </param>
            <param name="background">The background <see cref="T:System.Windows.Media.Color"/>. </param>
            <returns>The new <see cref="T:System.Windows.Media.Color"/>. </returns>
        </member>
        <member name="M:MyToolkit.Utilities.ColorUtilities.RemoveAlpha(System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>Removes the transparency from the foreground color using the given background color. </summary>
            <param name="foreground">The foreground <see cref="T:System.Windows.Media.Color"/>. </param>
            <param name="background">The background <see cref="T:System.Windows.Media.Color"/>. </param>
            <returns>The color without transparency. </returns>
        </member>
        <member name="M:MyToolkit.Utilities.ColorUtilities.ChangeAlpha(System.Windows.Media.Color,System.Byte)">
            <summary>Changes the alpha channel of the <see cref="T:System.Windows.Media.Color"/>. </summary>
            <param name="color">The <see cref="T:System.Windows.Media.Color"/>. </param>
            <param name="alpha">The new alpha value. </param>
            <returns>The new <see cref="T:System.Windows.Media.Color"/>. </returns>
        </member>
        <member name="M:MyToolkit.Utilities.ColorUtilities.ChangeAlpha(System.Windows.Media.Color,System.String)">
            <summary>Changes the alpha channel of the <see cref="T:System.Windows.Media.Color"/>. </summary>
            <param name="color">The <see cref="T:System.Windows.Media.Color"/>. </param>
            <param name="alpha">The new alpha value. </param>
            <returns>The new <see cref="T:System.Windows.Media.Color"/>. </returns>
        </member>
        <member name="M:MyToolkit.Utilities.ColorUtilities.ToHex(System.Windows.Media.Color,System.Boolean)">
            <summary>Converts a <see cref="T:System.Windows.Media.Color"/> to HEX string. </summary>
            <param name="color">The <see cref="T:System.Windows.Media.Color"/>. </param>
            <param name="includeAlpha">If false then #RRGGBB, true then #AARRGGBB. </param>
            <returns>The HEX string. </returns>
        </member>
        <member name="M:MyToolkit.Utilities.ColorUtilities.FromHex(System.String)">
            <summary>Creates a <see cref="T:System.Windows.Media.Color"/> from a HEX value. </summary>
            <param name="colorCode">The HEX in the form #RRGGBB or #AARRGGBB. </param>
            <returns>The <see cref="T:System.Windows.Media.Color"/>. </returns>
        </member>
        <member name="M:MyToolkit.Utilities.ColorUtilities.FromHex(System.UInt32)">
            <summary>Creates a <see cref="T:System.Windows.Media.Color"/> from a HEX value. </summary>
            <param name="argb">The HEX value. </param>
            <returns>The <see cref="T:System.Windows.Media.Color"/>. </returns>
        </member>
        <member name="T:MyToolkit.Utilities.DependencyPropertyChangedEvent">
            <summary>Provides methods to register to dependency property handler events. </summary>
        </member>
        <member name="M:MyToolkit.Utilities.DependencyPropertyChangedEvent.Register(System.Windows.FrameworkElement,System.Windows.DependencyProperty,System.Action{System.Object,System.Object})">
            <summary>Registers an event callback on a given dependency property. </summary>
            <param name="frameworkElement">The source framework element. </param>
            <param name="property">The property to register the callback for. </param>
            <param name="handler">The event handler. </param>
        </member>
        <member name="M:MyToolkit.Utilities.DependencyPropertyChangedEvent.Deregister(System.Windows.FrameworkElement,System.Windows.DependencyProperty,System.Action{System.Object,System.Object})">
            <summary>Deregisters an event callback from a given dependency property. </summary>
            <param name="frameworkElement">The source framework element. </param>
            <param name="property">The property to register the callback for. </param>
            <param name="handler">The event handler. </param>
        </member>
        <member name="T:MyToolkit.Utilities.Xml">
            <summary>Provides utility methods for handling XML. </summary>
        </member>
        <member name="T:MyToolkit.Build.AssemblyReference">
            <summary>Describes a referenced assembly. </summary>
        </member>
        <member name="M:MyToolkit.Build.AssemblyReference.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Build.AssemblyReference"/> class. </summary>
            <param name="rawName">The raw name. </param>
        </member>
        <member name="P:MyToolkit.Build.AssemblyReference.RawName">
            <summary>Gets the full name. </summary>
        </member>
        <member name="P:MyToolkit.Build.AssemblyReference.Name">
            <summary>Gets the name. </summary>
        </member>
        <member name="P:MyToolkit.Build.AssemblyReference.Version">
            <summary>Gets the assembly version. </summary>
        </member>
        <member name="T:MyToolkit.Build.NuGetPackage">
            <summary>Describes an installed NuGet package. </summary>
        </member>
        <member name="P:MyToolkit.Build.NuGetPackage.Name">
            <summary>Gets the name of the NuGet package. </summary>
        </member>
        <member name="P:MyToolkit.Build.NuGetPackage.Version">
            <summary>Gets the version of the installed NuGet package. </summary>
        </member>
        <member name="T:MyToolkit.Build.VsProjectRepository">
            <summary>Provides a fast lookup table to find projects by their paths. </summary>
        </member>
        <member name="M:MyToolkit.Build.VsProjectRepository.#ctor">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Build.VsProjectRepository"/> class with no projects. </summary>
        </member>
        <member name="M:MyToolkit.Build.VsProjectRepository.#ctor(System.Collections.Generic.IEnumerable{MyToolkit.Build.VsProject})">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Build.VsProjectRepository"/> class. </summary>
            <param name="projects">The projects. </param>
        </member>
        <member name="M:MyToolkit.Build.VsProjectRepository.TryGetProject(System.String)">
            <summary>Returns the cached project in the repository or returns null. </summary>
            <param name="projectPath">The project path. </param>
            <returns>The project. </returns>
        </member>
        <member name="T:MyToolkit.Build.VsObject">
            <summary>Describes a Visual Studio object. </summary>
        </member>
        <member name="P:MyToolkit.Build.VsObject.Id">
            <summary>Gets the id of the object. </summary>
        </member>
        <member name="P:MyToolkit.Build.VsObject.Name">
            <summary>Gets the name of the project. </summary>
        </member>
        <member name="P:MyToolkit.Build.VsObject.Path">
            <summary>Gets the path of the project file. </summary>
        </member>
        <member name="P:MyToolkit.Build.VsObject.Namespace">
            <summary>Gets the root namespace. </summary>
        </member>
        <member name="P:MyToolkit.Build.VsObject.FrameworkVersion">
            <summary>Gets or sets the target framework version. </summary>
        </member>
        <member name="P:MyToolkit.Build.VsObject.FileName">
            <summary>Gets the file name of the project. </summary>
        </member>
        <member name="T:MyToolkit.Build.VsProject">
            <summary>Describes a Visual Studio project. </summary>
        </member>
        <member name="M:MyToolkit.Build.VsProject.AreSameProjectFiles(System.String,System.String)">
            <summary>Checks whether the two project file paths are the same files. </summary>
            <param name="projectPath1">The first project file path. </param>
            <param name="projectPath2">The second project file path. </param>
            <returns>True when the paths are the same files. </returns>
        </member>
        <member name="M:MyToolkit.Build.VsProject.FromFilePath(System.String)">
            <summary>Loads a project from a given file path. </summary>
            <param name="filePath">The project file path. </param>
            <returns>The project. </returns>
        </member>
        <member name="M:MyToolkit.Build.VsProject.LoadAllFromDirectoryAsync(System.String,System.Boolean)">
            <summary>Recursively loads all Visual Studio projects from the given directory. </summary>
            <param name="path">The directory path. </param>
            <param name="ignoreExceptions">Specifies whether to ignore exceptions (projects with exceptions are not returned). </param>
            <returns>The projects. </returns>
        </member>
        <member name="M:MyToolkit.Build.VsProject.LoadReferences">
            <summary>Loads the project's referenced assemblies, projects and NuGet packages. </summary>
        </member>
        <member name="M:MyToolkit.Build.VsProject.IsReferencingProject(MyToolkit.Build.VsProject)">
            <summary>Checks whether this project references the given project. </summary>
            <param name="project">The project. </param>
            <returns>True when the given project is referenced. </returns>
        </member>
        <member name="M:MyToolkit.Build.VsProject.IsReferencingAnyProjects(System.Collections.Generic.IEnumerable{MyToolkit.Build.VsProject})">
            <summary>Checks whether the project is referencing any of the given projects. </summary>
            <param name="projects">The projects to check. </param>
            <returns>True when this project references any of the given projects. </returns>
        </member>
        <member name="M:MyToolkit.Build.VsProject.IsProjectFile(System.String)">
            <summary>Checks whether both projects are loaded from the same file. </summary>
            <param name="filePath">The project path. </param>
            <returns>true when both projects are loaded from the same file. </returns>
        </member>
        <member name="M:MyToolkit.Build.VsProject.IsSameProject(MyToolkit.Build.VsProject)">
            <summary>Checks whether both projects are loaded from the same file. </summary>
            <param name="project">The other project. </param>
            <returns>true when both projects are loaded from the same file. </returns>
        </member>
        <member name="P:MyToolkit.Build.VsProject.ProjectReferences">
            <summary>Gets the list of referenced projects. </summary>
        </member>
        <member name="P:MyToolkit.Build.VsProject.AssemblyReferences">
            <summary>Gets the list of referenced assemblies (DLLs). </summary>
        </member>
        <member name="P:MyToolkit.Build.VsProject.NuGetReferences">
            <summary>Gets the list of installed NuGet packages. </summary>
        </member>
        <member name="T:MyToolkit.Build.VsProjectEnumerableExtensions">
            <summary>Provides extension methods for enumerables of <see cref="T:MyToolkit.Build.VsProject"/>. </summary>
        </member>
        <member name="M:MyToolkit.Build.VsProjectEnumerableExtensions.SortByBuildOrder(System.Collections.Generic.IEnumerable{MyToolkit.Build.VsProject})">
            <summary>Sorts the given enumeration of <see cref="T:MyToolkit.Build.VsProject"/> by their required build order. </summary>
            <param name="projects">The projects to sort. </param>
            <returns>The projects in the correct build order. </returns>
            <exception cref="T:MyToolkit.Build.BuildOrderException">Thrown when the projects have cyclic dependencies. </exception>
        </member>
        <member name="T:MyToolkit.Build.VsSolution">
            <summary>Describes a Visual Studio solution. </summary>
        </member>
        <member name="M:MyToolkit.Build.VsSolution.FromFilePath(System.String)">
            <summary>Loads a solution from a given file path. </summary>
            <param name="filePath">The solution file path. </param>
            <returns>The solution. </returns>
        </member>
        <member name="M:MyToolkit.Build.VsSolution.LoadProjects">
            <summary>Loads all projects of the solution. </summary>
        </member>
        <member name="M:MyToolkit.Build.VsSolution.LoadProjects(MyToolkit.Build.VsProjectRepository,System.Boolean)">
            <summary>Loads all projects of the solution. </summary>
            <param name="loadedProjects">The already loaded projects (used instead of reloading a project object). </param>
            <param name="ignoreExceptions">Specifies whether to ignore exceptions. </param>
        </member>
        <member name="M:MyToolkit.Build.VsSolution.LoadAllFromDirectoryAsync(System.String,System.Boolean)">
            <summary>Recursively loads all Visual Studio solutions from the given directory. </summary>
            <param name="path">The directory path. </param>
            <param name="ignoreExceptions">Specifies whether to ignore exceptions (solutions with exceptions are not returned). </param>
            <returns>The solutions. </returns>
        </member>
        <member name="P:MyToolkit.Build.VsSolution.Projects">
            <summary>Gets the list of projects. </summary>
        </member>
        <member name="T:MyToolkit.UI.ShortcutManager">
            <summary>The manager for registering shortcuts.</summary>
        </member>
        <member name="M:MyToolkit.UI.ShortcutManager.RegisterShortcut(System.Type,System.Windows.Input.KeyGesture,System.Action,System.Func{System.Boolean})">
            <summary>Registers a given shortcut for a specific view and connect that shortcut with a given action.</summary>
            <param name="viewType">The type of the view.</param>
            <param name="gesture">The shortcut.</param>
            <param name="action">The action.</param>
            <param name="canExecute">Delegate that determines wheter the action can be executed.</param>
        </member>
        <member name="M:MyToolkit.UI.ShortcutManager.RegisterShortcut(System.Type,System.Windows.Input.KeyGesture,System.Windows.Input.ICommand)">
            <summary>Registers a given shortcut for a specific view and connect that shortcut with a given action.</summary>
            <param name="viewType">The type of the view.</param>
            <param name="gesture">The shortcut.</param>
            <param name="command">The command.</param>
        </member>
        <member name="M:MyToolkit.UI.ShortcutManager.RegisterShortcut(System.Type[],System.Windows.Input.KeyGesture,System.Action,System.Func{System.Boolean})">
            <summary>Registers a given shortcut for specific views and connect that shortcut with a given action.</summary>
            <param name="viewTypes">The view types.</param>
            <param name="gesture">The shortcut.</param>
            <param name="action">The action.</param>
            <param name="canExecute">Delegate that determines wheter the action can be executed.</param>
        </member>
        <member name="M:MyToolkit.UI.ShortcutManager.RegisterShortcut(System.Type[],System.Windows.Input.KeyGesture,System.Windows.Input.ICommand)">
            <summary>Registers a given shortcut for a specific views and connect that shortcut with a given action.</summary>
            <param name="viewTypes">The view types.</param>
            <param name="gesture">The shortcut.</param>
            <param name="command">The command.</param>
        </member>
        <member name="M:MyToolkit.UI.UiDispatcher.InvokeAsync(System.Action)">
            <summary>
            Invokes an action on the dispatcher thread. 
            </summary>
            <param name="action">The action. </param>
        </member>
        <member name="T:MyToolkit.Utilities.ApplicationUpdater">
            <summary>Checks for application updates. </summary>
        </member>
        <member name="M:MyToolkit.Utilities.ApplicationUpdater.#ctor(System.Reflection.Assembly,System.String)">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Utilities.ApplicationUpdater"/> class. </summary>
            <param name="applicationAssembly">The application assembly. </param>
            <param name="updateUri">The update URI. </param>
        </member>
        <member name="M:MyToolkit.Utilities.ApplicationUpdater.#ctor(System.Version,System.String)">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Utilities.ApplicationUpdater"/> class. </summary>
            <param name="currentVersion">The current application version. </param>
            <param name="updateUri">The update URI. </param>
        </member>
        <member name="M:MyToolkit.Utilities.ApplicationUpdater.CheckForUpdate(System.Windows.Window)">
            <summary>Checks for update and asks user if application should be updated 
            (this is currently beta: not localized and opens browser for download). </summary>
        </member>
        <member name="T:MyToolkit.Utilities.AssemblyExtensions">
            <summary>Provides extension methods for <see cref="T:System.Reflection.Assembly"/> objects. </summary>
        </member>
        <member name="M:MyToolkit.Utilities.AssemblyExtensions.GetBuildTime(System.Reflection.Assembly)">
            <summary>Gets the build time of the assembly. </summary>
            <param name="assembly">The assembly. </param>
            <returns>The build time. </returns>
        </member>
        <member name="M:MyToolkit.Utilities.AssemblyExtensions.GetVersionWithBuildTime(System.Reflection.Assembly)">
            <summary>Gets the version and the build time of the assembly (format: '0.0.0.0 (BUILDTIME)'). </summary>
            <param name="assembly">The assembly. </param>
            <returns>The version and build time. </returns>
        </member>
        <member name="T:MyToolkit.Utilities.FileOpenEventArgs">
            <summary>The file open event arguments. </summary>
        </member>
        <member name="P:MyToolkit.Utilities.FileOpenEventArgs.FileName">
            <summary>Gets the file name of the file to open. </summary>
        </member>
        <member name="T:MyToolkit.Utilities.FileOpenHandler">
            <summary>Handles the file open command line parameter and assures that files are opened in the same application. </summary>
        </member>
        <member name="M:MyToolkit.Utilities.FileOpenHandler.Initialize(System.Windows.Window)">
            <summary>Initializes the file open handler. </summary>
            <param name="window">The window. </param>
        </member>
        <member name="P:MyToolkit.Utilities.FileOpenHandler.Window">
            <summary>Gets the window where the events are dispatched to. </summary>
        </member>
        <member name="E:MyToolkit.Utilities.FileOpenHandler.FileOpen">
            <summary>Occurs when a file should be opened. </summary>
        </member>
        <member name="T:MyToolkit.Build.ProjectDependencyResolver">
            <summary>Provides methods to work with Visual Studio project files. </summary>
        </member>
        <member name="M:MyToolkit.Build.ProjectDependencyResolver.GetProjectReferences(System.String)">
            <summary>Gets all referenced project files of a given Visual Studio project file. </summary>
            <param name="projectPath">The project file path. </param>
            <returns>The referenced project files. </returns>
        </member>
        <member name="M:MyToolkit.Build.ProjectDependencyResolver.GetBuildOrder(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Sorts the given projects in their required build order. </summary>
            <param name="projectPaths">The project files. </param>
            <returns>The project file paths in the correct build order. </returns>
        </member>
    </members>
</doc>
